#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <numeric> 
using namespace std;

struct Student {
    string name;
    string studentID;
    string major;
    vector<pair<string, double>> courses;
    double GPA;
};
void registerStudent(vector<Student> &students);
void registerCourse(vector<Student> &students);
void displayStudentList(const vector<Student> &students);
void displayStudentList(const vector<Student> &students, const string &major);
void generateGradeSheet(const vector<Student> &students, const string &studentID);
void registerStudent(vector<Student> &students) {
    Student newStudent;
    cout << "Enter student name: ";
    cin >> newStudent.name;
    cout << "Enter student ID: ";
    cin >> newStudent.studentID;
    cout << "Enter student major: ";
    cin >> newStudent.major;
    newStudent.GPA = 0.0; 
    students.push_back(newStudent);
    cout << "Student registered successfully!\n";
}
void registerCourse(vector<Student> &students) {
    string studentID;
    cout << "Enter student ID: ";
    cin >> studentID;
    for (auto &student : students) {
        if (student.studentID == studentID) {
            string courseName;
            double courseGrade;
            cout << "Enter course name: ";
            cin >> courseName;
            cout << "Enter course grade: ";
            cin >> courseGrade;
            student.courses.push_back(make_pair(courseName, courseGrade));
            student.GPA = accumulate(student.courses.begin(), student.courses.end(), 0.0,
                                [](double sum, const pair<string, double> &course) {
                    return sum + course.second;
                }) / student.courses.size();
            cout << "Course registered successfully!\n";
            return;
        }
    }
    cout << "Student ID not found.\n";
}
void displayStudentList(const vector<Student> &students) {
    cout << "Student List:\n";
    for (const auto &student : students) {
        cout << "Name: " << student.name << ", ID: " << student.studentID 
             << ", Major: " << student.major << ", GPA: " << fixed << setprecision(2) 
             << student.GPA << "\n";
    }
}
void displayStudentList(const vector<Student> &students, const string &major) {
    cout << "Students in Major: " << major << "\n";
    for (const auto &student : students) {
        if (student.major == major) {
            cout << "Name: " << student.name << ", ID: " << student.studentID 
                 << ", GPA: " << fixed << setprecision(2) << student.GPA << "\n";
        }
    }
}
void generateGradeSheet(const vector<Student> &students, const string &studentID) {
    for (const auto &student : students) {
        if (student.studentID == studentID) {
            cout << "Grade Sheet for " << student.name << " (ID: " << student.studentID << ")\n";
            for (const auto &course : student.courses) {
                cout << "Course: " << course.first << ", Grade: " << course.second << "\n";
            }
            cout << "GPA: " << fixed << setprecision(2) << student.GPA << "\n";
            return;
        }
    }
    cout << "Student ID not found.\n";
}

int main() {
    vector<Student> students;
    int choice;
    do {
        cout << "1. Register Student\n2. Register Course\n3. Display All Students\n4. Display Students by Major\n5. Generate Grade Sheet\n6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                registerStudent(students);
                break;
            case 2:
                registerCourse(students);
                break;
            case 3:
                displayStudentList(students);
                break;
            case 4: {
                string major;
                cout << "Enter major: ";
                cin >> major;
                displayStudentList(students, major);
                break;
            }
            case 5: {
                string studentID;
                cout << "Enter student ID: ";
                cin >> studentID;
                generateGradeSheet(students, studentID);
                break;
            }
            case 6:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);
    return 0;
}